Partition Equal Subset Sum
--------------------------
Time Complexity - O(sum*n)
Space Complexity - O(sum*n)
--------------------------
class Solution {
    public boolean canPartition(int[] nums) {
        int sum =0;
        int n = nums.length;
        for(int i=0;i<n;i++){
            sum += nums[i];
        }

        if(sum % 2 != 0){
            return false;
        }
        int[][] memo = new int[n][sum + 1];
        for(int[] row : memo){
            Arrays.fill(row,-1);
        }
        return isSubsetSum(n,nums,sum/2,memo);
    }
    public boolean isSubsetSum(int n,int[] nums,int sum,int[][] memo){
        if(sum == 0){
            return true;
        }
        if(n ==0){
            return false;
        }
        if(memo[n-1][sum] != -1){
            return memo[n-1][sum] == 1;
        }
// If last element is greater than sum, ignore it
        if(nums[n-1] > sum){
            return isSubsetSum(n-1,nums,sum,memo);
        }
        memo[n-1][sum] = (isSubsetSum(n-1,nums,sum,memo) || isSubsetSum(n-1,nums,sum-nums[n-1],memo)) ? 1 : 0;
        return memo[n-1][sum] == 1;
    }
}
