House Robber II
-----------------------
Time Complexity - O(n)
Space Complexity - O(1)
-----------------------
class Solution {
    public int rob(int[] nums) {
       int n = nums.length;
       if(n==1) {return nums[0];}
       if(n==2) {return Math.max(nums[0],nums[1]);}
        int ans1 = 0;
        int ans2 = 0;
      
        int dp0 = nums[0];
        int dp1 = Math.max(nums[0],nums[1]);
        for(int i=2;i<n-1;i++){
            int dpn = Math.max(dp1, dp0 + nums[i]);
            dp0 = dp1;
            dp1 = dpn;
        }
        ans1 = dp1;
       
        dp0 = nums[n-1];
        dp1 = Math.max(nums[n-1],nums[n-2]);
        for(int i=n-3;i>=1;i--){
           int dpn = Math.max(dp1, dp0 + nums[i]);
            dp0 = dp1;
            dp1 = dpn; 
        }
        ans2 = dp1;

        return Math.max(ans1,ans2);
       
     
    }
}
