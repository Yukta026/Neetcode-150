Longest Palindromic Substring
-----------------------------
Time Complexity - O(n^2)
Space Complexity - O(1)
-----------------------------
class Solution {
    public String longestPalindrome(String s) {
        int n = s.length();
        if(n==0){return "";}
        if(n==1){return s;}
        int res = 0;
        int start = 0;
        
        for(int i=0;i<n;i++){
            // Odd Palindrome 
            int oddLen = checkAroundCenter(s,i,i);
            // Even Palindrome 
            int evenLen = checkAroundCenter(s,i,i+1);

            int len = Math.max(oddLen,evenLen);
            if(len > res){
                res = len;
                start = i - (len-1)/2;
            }
        }
        return s.substring(start,start+res);
    }
    public int checkAroundCenter(String s,int left,int right){
        while(left >=0 && right <s.length() && s.charAt(left) == s.charAt(right) ){
            left--;
            right++;
        }
        return right-left-1;
    }
}
