Regular Expression Matching using memoization
--------------------------------------------
Time Complexity - O(m*n)
Space Complexity - O(m*n)
--------------------------------------------
class Solution {
    public boolean isMatch(String s, String p) {
        int m = s.length();
        int n = p.length();
        Boolean[][] dp = new Boolean[m+1][n+1];
        return helper(0,0,s,p,dp);
    }
    public boolean helper(int i,int j,String s, String p, Boolean[][] dp){
        if(dp[i][j] != null){return dp[i][j];}
        boolean ans;
        if(j == p.length()){ans = (i == s.length());}
        else{
            boolean firstMatch = (i < s.length() && (p.charAt(j) == s.charAt(i) || p.charAt(j) == '.'));
            if(j+1 < p.length() && p.charAt(j+1) == '*'){
                ans = helper(i,j+2,s,p,dp) || (firstMatch && helper(i+1,j,s,p,dp));

            }
            else{
                ans = firstMatch && helper(i+1,j+1,s,p,dp);
            }
        }
        return dp[i][j] = ans;
    }
}
