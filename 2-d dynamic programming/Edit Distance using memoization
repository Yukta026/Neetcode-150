Edit Distance using memoization
-------------------------------
Time Complexity - O(m*n)
Space Complexity - O(m*n)
-------------------------------
class Solution {
    public int minDistance(String word1, String word2) {
        int m = word1.length();
        int n = word2.length();

        int[][] dp = new int[m][n];

        for(int[] row : dp){
            Arrays.fill(row,-1);
        }
        return helper(m-1,n-1,word1,word2,dp);
    }
    public int helper(int i,int j,String word1,String word2,int[][] dp){
        if(i < 0){ return j+1;} // Insert remaining characters of word2
        if(j < 0){return i+1;} // Delete remaining characters of word1

        if(dp[i][j] != -1){return dp[i][j];}

        if(word1.charAt(i) == word2.charAt(j)){
           return helper(i-1,j-1,word1,word2,dp);
        }

        int insert = helper(i,j-1,word1,word2,dp);
        int replace = helper(i-1,j-1,word1,word2,dp);
        int remove = helper(i-1,j,word1,word2,dp);

        return dp[i][j] = 1 + Math.min(insert, Math.min(replace,remove));
    }
}
