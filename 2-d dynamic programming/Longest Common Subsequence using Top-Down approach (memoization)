Longest Common Subsequence using Top-Down approach (memoization)
----------------------------------------------------------------
Time Complexity - O(m*n)
Space Complexity - O(m*n)
----------------------------------------------------------------
class Solution {
    public int longestCommonSubsequence(String text1, String text2) {
        int len1 = text1.length();
        int len2 = text2.length();

        int[][] dp = new int[len1+1][len2+1];

        for(int i=0;i<=len1;i++){
            Arrays.fill(dp[i],-1);
        }

        return helper(text1,text2,len1,len2,dp);
        
    }
    public int helper(String text1,String text2, int m,int n,int[][] dp){
// If string is empty return  0 to avoid out of bounds exception
        if(m == 0 || n == 0){
            return 0;
        }

        if(dp[m][n] != -1){
            return dp[m][n];
        }
        char a = text1.charAt(m-1);
        char b = text2.charAt(n-1);
// If characters match reduce the index for both strings
        if(a == b){
            return dp[m][n] = 1 + helper(text1,text2,m-1,n-1,dp);
        }
// Otherwise return the maximum length of subsequence alternatively reducing index for both strings
        else{
            return dp[m][n] = Math.max(helper(text1,text2,m-1,n,dp), helper(text1,text2,m,n-1,dp));
        }
    }
}
